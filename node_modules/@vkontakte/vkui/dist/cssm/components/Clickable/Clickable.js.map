{"version":3,"sources":["../../../../src/components/Clickable/Clickable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { type FocusVisibleModeProps } from '../../hooks/useFocusVisibleClassName';\nimport { RootComponent, type RootComponentProps } from '../RootComponent/RootComponent';\nimport { RealClickable } from './RealClickable';\nimport { type StateProps } from './useState';\nimport styles from './Clickable.module.css';\n\nexport interface ClickableProps<T = HTMLElement>\n  extends RootComponentProps<T>,\n    FocusVisibleModeProps,\n    StateProps {\n  /**\n   * Компонент который будет при передаче `onClick`. По умолчанию `\"div\"`.\n   */\n  DefaultComponent?: React.ElementType;\n}\n\n/**\n * Некликабельный компонент. Отключаем возможность нажимать на компонент.\n */\nconst NonClickable = <T,>({\n  href,\n  onClick,\n  onClickCapture,\n  activeClassName,\n  hoverClassName,\n  hasActive,\n  hasHover,\n  hovered,\n  unlockParentHover,\n  activated,\n  activeEffectDelay,\n  focusVisibleMode,\n  DefaultComponent,\n  Component,\n  ...restProps\n}: ClickableProps<T>) => <RootComponent Component={Component || DefaultComponent} {...restProps} />;\n\n/**\n * Проверяем, является ли компонент кликабельным.\n */\nexport function checkClickable<T>(props: ClickableProps<T>): boolean {\n  return (\n    (props.href !== undefined ||\n      props.onClick !== undefined ||\n      props.onClickCapture !== undefined ||\n      props.Component === 'a' ||\n      props.Component === 'button' ||\n      props.Component === 'label' ||\n      props.Component === 'input') &&\n    !props.disabled\n  );\n}\n\n/**\n * Определяет правильный компонент и его свойства.\n *\n * - если передан Component, используем его\n * - при передаче `href` превратится в `a`,\n * - при передаче `onClick` превратится в `div` c `role=\"button\"` и `tabIndex=\"0\"`.\n * - иначе используется `div`.\n */\nfunction component<T>({\n  Component,\n  DefaultComponent = 'div',\n  onClick,\n  onClickCapture,\n  href,\n  disabled,\n}: ClickableProps<T>): RootComponentProps<T> {\n  if (Component !== undefined) {\n    return { Component, disabled };\n  } else if (href !== undefined) {\n    return {\n      Component: 'a',\n\n      /**\n       * Если ссылка отключена, добавляем атрибуты для доступности.\n       *\n       * - Тег `a` не поддерживает атрибут disabled, поэтому используем `aria-disabled`\n       * - Тег `a` без `href` не является ссылкой, поэтому добавляем `role=\"link\"`.\n       *\n       * @see см. https://w3c.github.io/html-aria/#example-communicate-a-disabled-link-with-aria.\n       *\n       */\n      ...(disabled && {\n        'aria-disabled': true,\n        'role': 'link',\n      }),\n    };\n  } else if (onClick !== undefined || onClickCapture !== undefined) {\n    return {\n      Component: DefaultComponent,\n      role: 'button',\n      ...(disabled ? { 'aria-disabled': true } : { tabIndex: 0 }),\n    };\n  }\n\n  return {};\n}\n\n/**\n * Базовый кликабельный корневой компонент.\n *\n * - при передаче `href` превратится в `a`,\n * - при передаче `onClick` превратится в `div` c `role=\"button\"` и `tabIndex=\"0\"`.\n * - иначе используется `div`.\n *\n * Отвечает за:\n *\n * - стейты наведения и нажатия\n * - a11y компонентов.\n */\nexport const Clickable = <T,>(props: ClickableProps<T>): React.ReactNode => {\n  const commonProps = component(props);\n  const isClickable = checkClickable(props);\n  const Component = isClickable ? RealClickable : NonClickable;\n\n  const {\n    baseClassName,\n    disabled, // Игнорируем disabled из пропсов, т.к. он обрабатывается в commonProps\n    Component: ignore,\n    ...restProps\n  } = props;\n\n  return (\n    <Component\n      baseClassName={classNames(baseClassName, styles.host)}\n      {...commonProps}\n      {...restProps}\n    />\n  );\n};\n"],"names":["React","classNames","RootComponent","RealClickable","styles","NonClickable","href","onClick","onClickCapture","activeClassName","hoverClassName","hasActive","hasHover","hovered","unlockParentHover","activated","activeEffectDelay","focusVisibleMode","DefaultComponent","Component","restProps","checkClickable","props","undefined","disabled","component","role","tabIndex","Clickable","commonProps","isClickable","baseClassName","ignore","host"],"mappings":";AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,SAASC,aAAa,QAAiC,oCAAiC;AACxF,SAASC,aAAa,QAAQ,qBAAkB;AAEhD,OAAOC,YAAY,yBAAyB;AAY5C;;CAEC,GACD,MAAMC,eAAe,CAAK,EACxBC,IAAI,EACJC,OAAO,EACPC,cAAc,EACdC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,EACRC,OAAO,EACPC,iBAAiB,EACjBC,SAAS,EACTC,iBAAiB,EACjBC,gBAAgB,EAChBC,gBAAgB,EAChBC,SAAS,EACT,GAAGC,WACe,iBAAK,KAAClB;QAAciB,WAAWA,aAAaD;QAAmB,GAAGE,SAAS;;AAE/F;;CAEC,GACD,OAAO,SAASC,eAAkBC,KAAwB;IACxD,OACE,AAACA,CAAAA,MAAMhB,IAAI,KAAKiB,aACdD,MAAMf,OAAO,KAAKgB,aAClBD,MAAMd,cAAc,KAAKe,aACzBD,MAAMH,SAAS,KAAK,OACpBG,MAAMH,SAAS,KAAK,YACpBG,MAAMH,SAAS,KAAK,WACpBG,MAAMH,SAAS,KAAK,OAAM,KAC5B,CAACG,MAAME,QAAQ;AAEnB;AAEA;;;;;;;CAOC,GACD,SAASC,UAAa,EACpBN,SAAS,EACTD,mBAAmB,KAAK,EACxBX,OAAO,EACPC,cAAc,EACdF,IAAI,EACJkB,QAAQ,EACU;IAClB,IAAIL,cAAcI,WAAW;QAC3B,OAAO;YAAEJ;YAAWK;QAAS;IAC/B,OAAO,IAAIlB,SAASiB,WAAW;QAC7B,OAAO;YACLJ,WAAW;YAEX;;;;;;;;OAQC,GACD,GAAIK,YAAY;gBACd,iBAAiB;gBACjB,QAAQ;YACV,CAAC;QACH;IACF,OAAO,IAAIjB,YAAYgB,aAAaf,mBAAmBe,WAAW;QAChE,OAAO;YACLJ,WAAWD;YACXQ,MAAM;YACN,GAAIF,WAAW;gBAAE,iBAAiB;YAAK,IAAI;gBAAEG,UAAU;YAAE,CAAC;QAC5D;IACF;IAEA,OAAO,CAAC;AACV;AAEA;;;;;;;;;;;CAWC,GACD,OAAO,MAAMC,YAAY,CAAKN;IAC5B,MAAMO,cAAcJ,UAAUH;IAC9B,MAAMQ,cAAcT,eAAeC;IACnC,MAAMH,YAAYW,cAAc3B,gBAAgBE;IAEhD,MAAM,EACJ0B,aAAa,EACbP,QAAQ,EACRL,WAAWa,MAAM,EACjB,GAAGZ,WACJ,GAAGE;IAEJ,qBACE,KAACH;QACCY,eAAe9B,WAAW8B,eAAe3B,OAAO6B,IAAI;QACnD,GAAGJ,WAAW;QACd,GAAGT,SAAS;;AAGnB,EAAE"}